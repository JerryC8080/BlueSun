window.blogArticles=[{"_id":"54846f3f5099d46d4d6deb9c","title":"Handlerbars 不完全指南 初稿","author":"JerryC","brief":"Handlebars是JavaScript一个语义模板库，通过对view和data的分离来快速构建Web模板。它采用\"Logic-less template\"（无逻辑模版）的思路，能够在加载时被预编译，而不是到了客户端执行到代码时再去编译， 这样可以保证模板加载和运行的速度。Handlebars兼容Mustache，你可以在Handlebars中导入Mustache模板。","content":"","markdown":"Handlerbars 不完全指南 初稿\r\n====\r\n目录\r\n---\r\n\r\n###初级部分\r\n\r\n1. [Introduction](#introduction)\r\n2. [Quick Start](#quick-start)\r\n2. [Expressions](#expressions)\r\n\t* Simplest Expression \r\n\t* Path\r\n\t* HTML-Escaping\r\n\t* Keyword\r\n\t* Comments\r\n\t* Block\r\n3. [Helper](#helper)\r\n\t* Helper 概念\r\n\t* Helper 参数\r\n\t* Block Helper\r\n\t* registerHelper()\r\n\t* registerHelper()的回调函数\r\n4. [Built-in Helper](#built-in-helper)\r\n\t* if helper\r\n\t* unless helper\r\n\t* each helper\r\n\t* with helper\r\n\t* lookup helper\r\n\t* log helper\r\n\r\n\r\n###高级部分\r\n\r\n1. Precompilation\r\n4. API\r\n5. Little Sprite（HTML Escaping、Handlerbars jQuery）\r\n6. Handlebars in nodejs\r\n\r\n---\r\n\r\nIntroduction\r\n---\r\n**Handlebars**是JavaScript一个语义模板库，通过对view和data的分离来快速构建Web模板。它采用\"Logic-less template\"（无逻辑模版）的思路，能够在加载时被预编译，而不是到了客户端执行到代码时再去编译， 这样可以保证模板加载和运行的速度。Handlebars兼容Mustache，你可以在Handlebars中导入Mustache模板。\r\n\r\n\r\nQuick Start\r\n---\r\n###Install\r\nHandlerbars的安装十分简单，只需要登录[官网](http://handlebarsjs.com/)下载最新的版本，然后嵌入到网页中去。handlebars是一个纯JS库，因此你可以像使用其他JS脚本一样用script标签来包含handlebars.js\r\n\r\n\t<script src=\"bower_components/handlebars/handlebars.js\"></script>\r\n\t\r\n###Template\r\nHandlebars expressions 是handlebars模板中最基本的单元，使用方法是加两个花括号`{{value}}`, handlebars模板会自动匹配相应的数值，对象甚至是函数。\r\n\r\n建立一个模板,ID（或者class）和type很重要，因为你要用他们来获取模板内容 例如：\r\n\t\r\n    <!-- Template -->\r\n    <script id=\"template\" type=\"text/x-handlebars-template\">\r\n        <div class=\"demo\">\r\n            <h1>Name: {{name}}</h1>\r\n            <p>Say :{{content}}</p>\r\n            <p>Here missing : {{content.title}}</p>\r\n        </div>\r\n    </script>\r\n\t\r\n###Data\r\nHandlebars会根据上下文来自动对表达式进行匹配，如果匹配项是个变量，则会输出变量的值，如果匹配项是个Helper，则Helper会被调用。 如果没找到匹配项，则没有输出。\r\n\r\nHandlebars 支持JSON格式的数据，准备以下测试数据：\r\n\r\n\t//  JSON数据\r\n    var context = { name: \"JerryC\", content: \"学挖掘机，到蓝翔\"};\r\n\r\n\r\n###Compile and Execute\r\n我们需要获取模板，然后用`Handlebars.compile()`进行编译：\r\n\r\n    //  读取模板\r\n    var source = $('#template').html();\r\n    \r\n    //  编译模板\r\n    var template = Handlebars.compile(source);\r\n    \r\n    //  装载数据\r\n    var html = template(context);\r\n\r\n###Result\r\n\r\n\t<div class=\"demo\">\r\n        <h1>Name: JerryC</h1>\r\n        <p>Say :学挖掘机，到蓝翔</p>\r\n        <p>Here missing : </p>\r\n    </div>\r\n\r\n###完整脚本\r\n请参考：[handlebars-quick-start.html](https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-quick-start.html)\r\n\r\n\r\nExpressions\r\n---\r\n### Simplest Expressions\r\n最简单的表达式：`<h1>{{title}}</h1>`\r\n\r\n执行的时候，handlebars首先在当前上下文环境中查找叫‘title’的helper，如果helper不存在，然后再查找叫‘title’的值。\r\n\r\n### Path\r\nhandlebars同时支持以'.'分隔的路径访问和以‘/’分隔的路径访问，也可以用'../'来访问父级属性。\r\n\t\r\n\t<!-- 以.访问 -->\r\n\t<h1>{{author.name}}</h1>\t// value='JerryC'\r\n\t\r\n\t<!-- 以/访问 -->\r\n\t<h1>{{author/name}}</h1>\t// value='JerryC'\r\n\t\r\n\t<!-- 以../访问 -->\r\n\t{{#with author}}\r\n\t\t<h1>{{../body}}</h1>\t// value='学挖掘机，到蓝翔'\r\n\t{{/with}}\r\n\t\r\n对应JSON数据\r\n\r\n\t{\r\n    \ttitle: \"My First Blog Post!\",\r\n  \t\tauthor: {\r\n    \t\tid: 88,\r\n    \t\tname: \"JerryC\"\r\n  \t\t},\r\n  \t\tbody: \"学挖掘机，到蓝翔\"  \t\r\n  \t};\r\n  \t\r\n\t\r\n\r\n### HTML-Escaping\r\n\r\n如果插入的是一堆html，那就需要使用三个大括号`{{{content}}}`,其中的content就是html内容。\r\n\r\nhandlebars除了提供`{{{}}}`形式来填充html之外，也提供了`Handlebars.SafeString()`函数来处理：\r\n\r\n\tHandlebars.registerHelper('link', function(object) {\r\n  \t\tvar url = Handlebars.escapeExpression(object.url),\r\n      \t\ttext = Handlebars.escapeExpression(object.text);\r\n\r\n  \t\treturn new Handlebars.SafeString(\r\n    \t\"<a href='\" + url + \"'>\" + objecttext + \"</a>\"\r\n  \t\t);\r\n\t});\r\n\r\n### Keyword\r\n下面的这些是handlebars表达式的关键词，不能作为标识符来使用：\r\n\r\n`!` `\"` `#` `%` `&` `'` `(` `)` `*` `+` `,` `.` `/` `;` `<` `=` `>` `@` `[` `\\` `]` `^` `{` `|` `}` `~` \r\n\r\n例如：`<h1>{{@title}}</h1>`，这样是不允许的。\r\n\r\n### Comments\r\nHandlebars的注释写法有两个：\r\n\r\n\t{{! handlebars comments }}\t\t\t//\t用于一行的注释\r\n\t{{!-- handlebars comments --}}\t\t//\t用于块级的注释\r\n\r\n###Block\r\n有时候当你需要对某条表达式进行更深入的操作时，Blocks就派上用场了，在Handlebars中，你可以在表达式后面跟随一个#号来表示Blocks，然后通过{{/表达式}}来结束Blocks。 如果当前的表达式是一个数组，则Handlebars会“自动展开数组”，并将Blocks的上下文设为数组中的元素。\r\n\r\n\t<ul>\r\n\t{{#programme}}\r\n    \t<li>{{language}}</li>\r\n\t{{/programme}}\r\n\t</ul>\r\n\t\r\n有以下json数据\r\n\r\n\t{\r\n  \t\tprogramme: [\r\n    \t\t{language: \"JavaScript\"},\r\n    \t\t{language: \"HTML\"},\r\n    \t\t{language: \"CSS\"}\r\n  \t\t]\r\n\t}\r\n\t\r\n编译模板代码同上…… 上面的代码会自动匹配programme数据并展开数据，渲染DOM后就是这样的\r\n\r\n\t<ul>\r\n  \t\t<li>JavaScript</li>\r\n  \t\t<li>HTML</li>\r\n  \t\t<li>CSS</li>\r\n\t</ul>\r\n\t\r\n\r\nHelper\r\n---\r\n\r\n###Helper 概念\r\n\r\n\r\nHelper是一个简单的handlebars标识符，Helper跟函数的概念有点像，因为绑定helper的就是一个回调函数，利用`Handlebars.registerHelper()`注册一个helper，然后在`{{helper}}`调用helper进行相关的处理。\r\n\r\n\r\nHandlebars提供一些诸如`if` `unless` `each` `with` `lookup` `log` 内置的helper以外，还允许用户通过`Handlebars.registerHelper()`自定义helper。\r\n\r\n\r\n请看下面例子：\r\n\r\nJSON数据\r\n\r\n\t{\r\n\t\tjerryc:{\r\n\t\t\turl : \"http://huang-jerryc.com\",\r\n\t\t\ttext: \"Bluesun --The personal Blog\"\r\n\t\t}\r\n\t}\r\n\t\r\n模板\r\n\r\n\t{{{link jerryc}}}\r\n\t\r\n注册helper\r\n\r\n\tHandlebars.registerHelper('link', function(object) {\r\n  \t\tvar url = Handlebars.escapeExpression(object.url),\r\n      \t\ttext = Handlebars.escapeExpression(object.text);\r\n\r\n  \t\treturn new Handlebars.SafeString(\r\n    \t\"<a href='\" + url + \"'>\" + objecttext + \"</a>\"\r\n  \t\t);\r\n\t});\r\n\t\r\nResult\r\n\r\n\t<a href=‘http://huang-jerryc.com’>Bluesun --The personal Blog</a>\r\n\t\r\n这个例子中，注册了一个叫`link`的helper，并且绑定了一个回调函数，把`jerryc`对象传到回调函数里面，然后回调函数进行处理后返回一串html代码。\r\n\r\n\r\n###Helper 参数 \r\n\r\nHelper后面可以跟零个或多个参数（用空格隔开），每个参数都是一个表达式。\r\n\r\n参数的类型可以是string、boolean、number、object或者是key-value的形式，同时也支持路径的方式。\r\n高级一点，helper还支持子表达式的写法。\r\n\r\n\t<!-- 参数可以为零个 -->\r\n\t{{link}}\r\n\t\r\n\t<!-- 参数可以包含一个或多个 -->\r\n\t{{link story}}\r\n\t\r\n\t<!-- 参数可以是string、boolean、number、object类型，并且可以用path的方式传送 -->\r\n\t{{link \"See more...\" story.url}}\r\n\t\r\n\t<!-- 参数能以key-value方式接收 -->\r\n\t{{link \"See more...\" href=story.url class=\"story\"}}\r\n\t\r\n\t<!-- helper支持子表达式的写法 -->\r\n\t{{outer-helper (inner-helper 'abc') 'def'}}\r\n\t\r\n例子：[handlebars-helper-parameters.html](https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-helper-parameters.html)\r\n\t\r\n###Block Helper\r\n名符其实，是结合了block语法的helper。形如：\r\n\r\n\t{{#link jerryc}}\r\n\t\t<p>url:{{url}}</p>\r\n\t\t<p>text:{{text}}</p>\r\n\t{{/link}}\r\n\r\n写功能的时候，block helper和普通得helper是有一些不一样的地方的：\r\n\r\n\tHandlebars.registerHelper('link', function(object,option) {\r\n        return option.fn(this);\t\r\n    });\r\n    \r\n结果是：\r\n\r\n\t<p>url:http://huang-jerryc.com</p>\r\n\t<p>text:Bluesun --The personal Blog</p>\r\n    \r\n`option.fn()`就像`Handlebars.compile()`函数一样，提供一个数据，返回一串字符串。\r\n\r\n而`this`，是当前的上下文环境，换句话说就是传进来的数据`jerryc`\r\n\r\n    \r\n###registerHelper()\r\n`registerHelper()`是`Handlebars`其中的一个函数，能够注册一个或多个helper，作用于所有的模版。\r\n\r\n注册一个helper的写法：\r\n\r\n\tHandlebars.registerHelper('foo', function() {});\r\n\t\r\n注册多个helper的写法：\r\n\r\n\tHandlebars.registerHelper({\r\n  \t\tfoo: function() {},\r\n  \t\tbar: function() {}\r\n\t});\r\n\t\r\n###registerHelper()的回调函数\r\n\r\n`registerHelper()`的回调函数支持两个参数：\r\n\r\n\tHandlebars.registerHelper('foo', function(object,option) {});\r\n\r\n`object`就是模版对应的对象，没什么好说的。重点在`option`，它会根据helper的类型而不同。\r\n\r\n如果是**普通的helper**，`option`的结构是这样的：\r\n\r\n\toption:{\r\n\t\tdata:Object,\t//  存放数据，其实就是回调函数的第一个参数object\r\n\t\thash:Object,\t//\thash列表，如果模板中调用helper的时候，传了key-value的参数，就会存到这里来\r\n\t\tname:'foo'\t\t//\thelper的名称\r\n\t}\r\n\t\r\n对应的模版：`{{foo object}}`\r\n\r\n如果是**block helper**，`option`的结构是这样的：\r\n\r\n\toption:{\r\n\t\tdata:Object,\t\t//  存放数据，其实就是回调函数的第一个参数object\r\n\t\thash:Object,\t\t//\thash列表，如果模板中调用helper的时候，传了key-value的参数，就会存到这里来\r\n\t\tname:'foo'\t\t\t//\thelper的名称\r\n\t\tfn:funtion,\t\t\t//\tfn函数就像Handlebars.compile()函数一样，提供一个数据，返回一串字符串。\r\n\t\tinverse:function\t//\t目前还不知道什么用途\r\n\t}\r\n\t\r\n对应的模版：`{{#foo object}}{{/foo}}`\r\n\r\n例子：[handlebars-helper-registerHelper.html](https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-helper-registerHelper.html)\r\n\r\nBuilt-in Helper\r\n---\r\n\r\n###if helper\r\n`{{#if}}`就和使用JavaScript一样，你可以指定条件渲染DOM，如果它的参数返回`false`，`undefined`, `null`, `\"\"` 或者 `[]` (一个错误的值), Handlebar将不会渲染DOM，如果存在`{{else}}`则执行`{{else}}`后面的渲染 例如：\r\n\r\n\t{{#if list}}\r\n\t\t<ul id=\"list\">\r\n    \t\t{{#each list}}\r\n        \t\t<li>{{this}}</li>\r\n    \t\t{{/each}}\r\n\t\t</ul>\r\n\t{{else}}\r\n    \t<p>{{error}}</p>\r\n\t{{/if}}\r\n对应适用json数据\r\n\r\n\tvar data = {\r\n    \tlist:['HTML5','CSS3',\"WebGL\"],\r\n   \t\terror:\"数据取出错误\"\r\n\t}\r\n\t\r\n这里`{{#if}}`判断是否存在list数组，如果存在则遍历list，如果不存在输出错误信息。\r\n\r\n###unless helper\r\n`{{#unless}}`这个语法是反向的if语法也就是当判断的值为false时他会渲染DOM 例如：\r\n\r\n\t<div class=\"entry\">\r\n\t\t{{#unless license}}\r\n  \t\t\t<h3 class=\"warning\">WARNING: This entry does not have a license!</h3>\r\n  \t\t{{/unless}}\r\n\t</div>\r\n\r\n如果`license`返回一个错误的值，那么Handlebars就会渲染这个模板，结果会是：\r\n\r\n\t<div class=\"entry\">\r\n  \t\t<h3 class=\"warning\">WARNING: This entry does not have a license!</h3>\r\n\t</div>\r\n\r\n###each helper\r\n你可以使用内置的each helper遍历列表块内容，用this来引用遍历的元素 例如：\r\n\r\n\t<ul>\r\n    \t{{#each name}}\r\n        \t<li>{{this}}</li>\r\n    \t{{/each}}\r\n\t</ul>\r\n对应适用的json数据\r\n\r\n\t{\r\n    \tname: [\"html\",\"css\",\"javascript\"]\r\n\t};\r\n\t\r\n这里的`this`指的是数组里的每一项元素，和上面的Block很像，但原理是不一样的这里的name是数组，而内置的each就是为了遍历数组用的，更复杂的数据也同样适用。\r\n\r\n###with helper\r\n`{{#with}}`一般情况下，Handlebars模板会在编译的阶段的时候进行context传递和赋值。使用with的方法，我们可以将context转移到数据的一个section里面（如果你的数据包含section）。 这个方法在操作复杂的template时候非常有用。\r\n\r\n\t<div class=\"entry\">\r\n  \t\t<h1>{{title}}</h1>\r\n  \t\t{{#with author}}\r\n  \t\t\t<h2>By {{firstName}} {{lastName}}</h2>\r\n  \t\t{{/with}}\r\n\t</div>\r\n\r\n对应适用json数据\r\n\r\n\t{\r\n  \t\ttitle: \"My first post!\",\r\n  \t\tauthor: {\r\n    \t\tfirstName: \"Charles\",\r\n    \t\tlastName: \"Jolley\"\r\n  \t\t}\r\n\t}\r\n\t\r\n另外，`{{with}}`也可以嵌套`{{else}}`使用：\r\n\r\n\t{{#with author}}\r\n  \t\t<p>{{name}}</p>\r\n\t{{else}}\r\n \t\t<p class=\"empty\">No content</p>\r\n\t{{/with}}\r\n\r\n\r\n###lookup helper\r\nlookup中文翻译是查找的意思，效果是在给定的父项中查找一个子项，看lookup helper的源码：\r\n\r\n    instance.registerHelper('lookup', function(obj, field) {\r\n      return obj && obj[field];\r\n    });\r\n    \r\n根据javascript的&&(逻辑与)运算规则，如果obj不存在，则返回false，如果obj存在，就判断obj[field]是否存在，如果存在就返回obj[field]的值，否则返回false。\r\n    \r\n上个例子看一下会更清楚，给定这么一个json数据：\r\n\r\n\t{\r\n  \t\ttitle: \"My first post!\",\r\n  \t\tauthor: {\r\n    \t\tfirstName: \"Charles\",\r\n    \t\tlastName: \"Jolley\"\r\n  \t\t},\r\n  \t\tskill:['HTML5','CSS3','Javascript']\r\n\t}\r\n\t\r\n那么：\r\n\r\n\t{{lookup author 'firstName'}}\t//\tCharles\r\n\t{{lookup author 0}}\t\t\t\t//\tnull\r\n\t{{lookup skill 'HMLT5'}}\t\t//\tnull\r\n\t{{lookup skill 0}}\t\t\t\t//\tHTML5\r\n\t{{lookup this title}}\t\t\t//\tMy first post!\r\n\t\r\nlookup配合each有一种巧妙的用法，可以遍历数组，输出数组的值：\r\n\r\n\t{{#each skill}}\r\n\t\t{{lookup ../skill @index}}、\t//\t@index是skill的索引\r\n\t{{/each}}\r\n\t\r\n结果是：`HTML5、CSS3、Javascript、`\r\n\r\n\r\n###log helper\r\n这个log helper很奇怪，我按照官方的做法：\r\n\r\n\t{{log 'Look up me!'}}\r\n\r\n但是没什么用。\r\n\r\n去查看log helper的源码：\r\n\r\n    instance.registerHelper('log', function(message, options) {\r\n      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;\r\n      instance.log(level, message);\r\n    });\r\n    \r\n这个instance.log()方法何许人也？寻找它的真相(387行)：\r\n\r\n  \tvar logger = {\r\n    \tmethodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },\r\n\r\n    \t// State enum\r\n    \tDEBUG: 0,\r\n    \tINFO: 1,\r\n    \tWARN: 2,\r\n    \tERROR: 3,\r\n    \tlevel: 3,\r\n\r\n    \t// can be overridden in the host environment\r\n    \tlog: function(level, message) {\r\n    \t  if (logger.level <= level) {\r\n    \t    var method = logger.methodMap[level];\r\n    \t    if (typeof console !== 'undefined' && console[method]) {\r\n    \t      console[method].call(console, message);\r\n    \t    }\r\n    \t  }\r\n    \t}\r\n  \t};\r\n  \t__exports__.logger = logger;\r\n  \tvar log = logger.log;\r\n  \t__exports__.log = log;\r\n  \t\r\n官方文档没有写明怎么用，在跟Handlebars的开发者沟通之后（[issue](https://github.com/wycats/handlebars.js/issues/888)），终于知道了怎么用。\r\n\r\n如果要用到log helper的话，需要添加这样的代码：`Handlebars.logger.level = Handlebars.logger.INFO`，这样log helper就会输出`ERROR`、`WARN`、`INFO`的信息了，默认是输出`ERROR`信息的。\r\n\r\n###完整脚本\r\n请参考：[handlebars-builtin-helper.html](https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-builtin-helper.html)\r\n\r\nPrecompilation\r\n---\r\nHandlebars允许把模版编译这一工作预先执行，减少客户端的压力。使用预编译是需要npm和node环境的，以下教程是在安装了npm和node环境的前提。\r\n\r\n###全局安装Handlebars\r\n\r\n\t$ npm install handlebars -g\r\n\r\n###预编译Template\r\n\r\n\t$ handlebars <input> -f <output>\r\n\t\r\n###Example\r\n\r\n我们新建一个Handlebars后缀的文件(helloworld.handlebars):\r\n\r\nhelloworld.handlebars:\r\n\t\r\n\t<div>\r\n    \t<h1>{{title}}</h1>\r\n    \t<p>Handlebars precompile example</p>\r\n    \t<p>Hello World!!!</p>\r\n\t</div>\r\n\t\r\n预编译helloworld.handlebars：\r\n\r\n\t$ handlebars helloworld.handlebars -f helloworld.js\r\n\t\r\n在html中引入helloworld.js文件(在Handlebars.js之后)：\r\n\t\r\n\t<script src=\"helloworld.js\"></script>\r\n\t\r\n然后我们就可以用`Handlebars.templates['helloworld']`或者`Handlebars.templates.helloworld`访问我们编译好的模板了。\r\n\r\n###完整脚本\r\n请参考：[handlebars-precompiled.html](https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-precompiled.html)","html":"<h1>Handlerbars 不完全指南 初稿</h1>\n\n<h2>目录</h2>\n\n<h3>初级部分</h3>\n\n<ol><li><a href=\"#introduction\">Introduction</a></li><li><a href=\"#quick-start\">Quick Start</a></li><li><a href=\"#expressions\">Expressions</a><ul><li>Simplest Expression </li><li>Path</li><li>HTML-Escaping</li><li>Keyword</li><li>Comments</li><li>Block</li></ul></li><li><a href=\"#helper\">Helper</a><ul><li>Helper 概念</li><li>Helper 参数</li><li>Block Helper</li><li>registerHelper()</li><li>registerHelper()的回调函数</li></ul></li><li><a href=\"#built-in-helper\">Built-in Helper</a><ul><li>if helper</li><li>unless helper</li><li>each helper</li><li>with helper</li><li>lookup helper</li><li>log helper</li></ul></li></ol>\n\n<h3>高级部分</h3>\n\n<ol><li>Precompilation</li><li>API</li><li>Little Sprite（HTML Escaping、Handlerbars jQuery）</li><li>Handlebars in nodejs</li></ol>\n\n<hr/>\n\n<h2>Introduction</h2>\n\n<p><strong>Handlebars</strong>是JavaScript一个语义模板库，通过对view和data的分离来快速构建Web模板。它采用&quot;Logic-less template&quot;（无逻辑模版）的思路，能够在加载时被预编译，而不是到了客户端执行到代码时再去编译， 这样可以保证模板加载和运行的速度。Handlebars兼容Mustache，你可以在Handlebars中导入Mustache模板。</p>\n\n<h2>Quick Start</h2>\n\n<h3>Install</h3>\n\n<p>Handlerbars的安装十分简单，只需要登录<a href=\"http://handlebarsjs.com/\">官网</a>下载最新的版本，然后嵌入到网页中去。handlebars是一个纯JS库，因此你可以像使用其他JS脚本一样用script标签来包含handlebars.js</p>\n\n<pre><code>&lt;script src=&quot;bower_components/handlebars/handlebars.js&quot;&gt;&lt;/script&gt;</code></pre>\n\n<h3>Template</h3>\n\n<p>Handlebars expressions 是handlebars模板中最基本的单元，使用方法是加两个花括号<code>{{value}}</code>, handlebars模板会自动匹配相应的数值，对象甚至是函数。</p>\n\n<p>建立一个模板,ID（或者class）和type很重要，因为你要用他们来获取模板内容 例如：</p>\n\n<pre><code>&lt;!-- Template --&gt;\n&lt;script id=&quot;template&quot; type=&quot;text/x-handlebars-template&quot;&gt;\n    &lt;div class=&quot;demo&quot;&gt;\n        &lt;h1&gt;Name: {{name}}&lt;/h1&gt;\n        &lt;p&gt;Say :{{content}}&lt;/p&gt;\n        &lt;p&gt;Here missing : {{content.title}}&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/script&gt;</code></pre>\n\n<h3>Data</h3>\n\n<p>Handlebars会根据上下文来自动对表达式进行匹配，如果匹配项是个变量，则会输出变量的值，如果匹配项是个Helper，则Helper会被调用。 如果没找到匹配项，则没有输出。</p>\n\n<p>Handlebars 支持JSON格式的数据，准备以下测试数据：</p>\n\n<pre><code>//  JSON数据\nvar context = { name: &quot;JerryC&quot;, content: &quot;学挖掘机，到蓝翔&quot;};</code></pre>\n\n<h3>Compile and Execute</h3>\n\n<p>我们需要获取模板，然后用<code>Handlebars.compile()</code>进行编译：</p>\n\n<pre><code>//  读取模板\nvar source = $(&#39;#template&#39;).html();\n\n//  编译模板\nvar template = Handlebars.compile(source);\n\n//  装载数据\nvar html = template(context);</code></pre>\n\n<h3>Result</h3>\n\n<pre><code>&lt;div class=&quot;demo&quot;&gt;\n    &lt;h1&gt;Name: JerryC&lt;/h1&gt;\n    &lt;p&gt;Say :学挖掘机，到蓝翔&lt;/p&gt;\n    &lt;p&gt;Here missing : &lt;/p&gt;\n&lt;/div&gt;</code></pre>\n\n<h3>完整脚本</h3>\n\n<p>请参考：<a href=\"https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-quick-start.html\">handlebars-quick-start.html</a></p>\n\n<h2>Expressions</h2>\n\n<h3>Simplest Expressions</h3>\n\n<p>最简单的表达式：<code>&lt;h1&gt;{{title}}&lt;/h1&gt;</code></p>\n\n<p>执行的时候，handlebars首先在当前上下文环境中查找叫‘title’的helper，如果helper不存在，然后再查找叫‘title’的值。</p>\n\n<h3>Path</h3>\n\n<p>handlebars同时支持以&#39;.&#39;分隔的路径访问和以‘/’分隔的路径访问，也可以用&#39;../&#39;来访问父级属性。</p>\n\n<pre><code>&lt;!-- 以.访问 --&gt;\n&lt;h1&gt;{{author.name}}&lt;/h1&gt;\t// value=&#39;JerryC&#39;\n\n&lt;!-- 以/访问 --&gt;\n&lt;h1&gt;{{author/name}}&lt;/h1&gt;\t// value=&#39;JerryC&#39;\n\n&lt;!-- 以../访问 --&gt;\n{{#with author}}\n\t&lt;h1&gt;{{../body}}&lt;/h1&gt;\t// value=&#39;学挖掘机，到蓝翔&#39;\n{{/with}}</code></pre>\n\n<p>对应JSON数据</p>\n\n<pre><code>{\n\ttitle: &quot;My First Blog Post!&quot;,\n\tauthor: {\n\t\tid: 88,\n\t\tname: &quot;JerryC&quot;\n\t},\n\tbody: &quot;学挖掘机，到蓝翔&quot;  \t\n};</code></pre>\n\n<h3>HTML-Escaping</h3>\n\n<p>如果插入的是一堆html，那就需要使用三个大括号<code>{{{content}}}</code>,其中的content就是html内容。</p>\n\n<p>handlebars除了提供<code>{{{}}}</code>形式来填充html之外，也提供了<code>Handlebars.SafeString()</code>函数来处理：</p>\n\n<pre><code>Handlebars.registerHelper(&#39;link&#39;, function(object) {\n\tvar url = Handlebars.escapeExpression(object.url),\n  \t\ttext = Handlebars.escapeExpression(object.text);\n\n\treturn new Handlebars.SafeString(\n\t&quot;&lt;a href=&#39;&quot; + url + &quot;&#39;&gt;&quot; + objecttext + &quot;&lt;/a&gt;&quot;\n\t);\n});</code></pre>\n\n<h3>Keyword</h3>\n\n<p>下面的这些是handlebars表达式的关键词，不能作为标识符来使用：</p>\n\n<p><code>!</code> <code>&quot;</code> <code>#</code> <code>%</code> <code>&amp;</code> <code>&#39;</code> <code>(</code> <code>)</code> <code>*</code> <code>+</code> <code>,</code> <code>.</code> <code>/</code> <code>;</code> <code>&lt;</code> <code>=</code> <code>&gt;</code> <code>@</code> <code>[</code> <code>\\</code> <code>]</code> <code>^</code> <code>{</code> <code>|</code> <code>}</code> <code>~</code> </p>\n\n<p>例如：<code>&lt;h1&gt;{{@title}}&lt;/h1&gt;</code>，这样是不允许的。</p>\n\n<h3>Comments</h3>\n\n<p>Handlebars的注释写法有两个：</p>\n\n<pre><code>{{! handlebars comments }}\t\t\t//\t用于一行的注释\n{{!-- handlebars comments --}}\t\t//\t用于块级的注释</code></pre>\n\n<h3>Block</h3>\n\n<p>有时候当你需要对某条表达式进行更深入的操作时，Blocks就派上用场了，在Handlebars中，你可以在表达式后面跟随一个#号来表示Blocks，然后通过{{/表达式}}来结束Blocks。 如果当前的表达式是一个数组，则Handlebars会“自动展开数组”，并将Blocks的上下文设为数组中的元素。</p>\n\n<pre><code>&lt;ul&gt;\n{{#programme}}\n\t&lt;li&gt;{{language}}&lt;/li&gt;\n{{/programme}}\n&lt;/ul&gt;</code></pre>\n\n<p>有以下json数据</p>\n\n<pre><code>{\n\tprogramme: [\n\t\t{language: &quot;JavaScript&quot;},\n\t\t{language: &quot;HTML&quot;},\n\t\t{language: &quot;CSS&quot;}\n\t]\n}</code></pre>\n\n<p>编译模板代码同上…… 上面的代码会自动匹配programme数据并展开数据，渲染DOM后就是这样的</p>\n\n<pre><code>&lt;ul&gt;\n\t&lt;li&gt;JavaScript&lt;/li&gt;\n\t&lt;li&gt;HTML&lt;/li&gt;\n\t&lt;li&gt;CSS&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<h2>Helper</h2>\n\n<h3>Helper 概念</h3>\n\n<p>Helper是一个简单的handlebars标识符，Helper跟函数的概念有点像，因为绑定helper的就是一个回调函数，利用<code>Handlebars.registerHelper()</code>注册一个helper，然后在<code>{{helper}}</code>调用helper进行相关的处理。</p>\n\n<p>Handlebars提供一些诸如<code>if</code> <code>unless</code> <code>each</code> <code>with</code> <code>lookup</code> <code>log</code> 内置的helper以外，还允许用户通过<code>Handlebars.registerHelper()</code>自定义helper。</p>\n\n<p>请看下面例子：</p>\n\n<p>JSON数据</p>\n\n<pre><code>{\n\tjerryc:{\n\t\turl : &quot;http://huang-jerryc.com&quot;,\n\t\ttext: &quot;Bluesun --The personal Blog&quot;\n\t}\n}</code></pre>\n\n<p>模板</p>\n\n<pre><code>{{{link jerryc}}}</code></pre>\n\n<p>注册helper</p>\n\n<pre><code>Handlebars.registerHelper(&#39;link&#39;, function(object) {\n\tvar url = Handlebars.escapeExpression(object.url),\n  \t\ttext = Handlebars.escapeExpression(object.text);\n\n\treturn new Handlebars.SafeString(\n\t&quot;&lt;a href=&#39;&quot; + url + &quot;&#39;&gt;&quot; + objecttext + &quot;&lt;/a&gt;&quot;\n\t);\n});</code></pre>\n\n<p>Result</p>\n\n<pre><code>&lt;a href=‘http://huang-jerryc.com’&gt;Bluesun --The personal Blog&lt;/a&gt;</code></pre>\n\n<p>这个例子中，注册了一个叫<code>link</code>的helper，并且绑定了一个回调函数，把<code>jerryc</code>对象传到回调函数里面，然后回调函数进行处理后返回一串html代码。</p>\n\n<h3>Helper 参数</h3>\n\n<p>Helper后面可以跟零个或多个参数（用空格隔开），每个参数都是一个表达式。</p>\n\n<p>参数的类型可以是string、boolean、number、object或者是key-value的形式，同时也支持路径的方式。\n高级一点，helper还支持子表达式的写法。</p>\n\n<pre><code>&lt;!-- 参数可以为零个 --&gt;\n{{link}}\n\n&lt;!-- 参数可以包含一个或多个 --&gt;\n{{link story}}\n\n&lt;!-- 参数可以是string、boolean、number、object类型，并且可以用path的方式传送 --&gt;\n{{link &quot;See more...&quot; story.url}}\n\n&lt;!-- 参数能以key-value方式接收 --&gt;\n{{link &quot;See more...&quot; href=story.url class=&quot;story&quot;}}\n\n&lt;!-- helper支持子表达式的写法 --&gt;\n{{outer-helper (inner-helper &#39;abc&#39;) &#39;def&#39;}}</code></pre>\n\n<p>例子：<a href=\"https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-helper-parameters.html\">handlebars-helper-parameters.html</a></p>\n\n<h3>Block Helper</h3>\n\n<p>名符其实，是结合了block语法的helper。形如：</p>\n\n<pre><code>{{#link jerryc}}\n\t&lt;p&gt;url:{{url}}&lt;/p&gt;\n\t&lt;p&gt;text:{{text}}&lt;/p&gt;\n{{/link}}</code></pre>\n\n<p>写功能的时候，block helper和普通得helper是有一些不一样的地方的：</p>\n\n<pre><code>Handlebars.registerHelper(&#39;link&#39;, function(object,option) {\n    return option.fn(this);\t\n});</code></pre>\n\n<p>结果是：</p>\n\n<pre><code>&lt;p&gt;url:http://huang-jerryc.com&lt;/p&gt;\n&lt;p&gt;text:Bluesun --The personal Blog&lt;/p&gt;</code></pre>\n\n<p><code>option.fn()</code>就像<code>Handlebars.compile()</code>函数一样，提供一个数据，返回一串字符串。</p>\n\n<p>而<code>this</code>，是当前的上下文环境，换句话说就是传进来的数据<code>jerryc</code></p>\n\n<h3>registerHelper()</h3>\n\n<p><code>registerHelper()</code>是<code>Handlebars</code>其中的一个函数，能够注册一个或多个helper，作用于所有的模版。</p>\n\n<p>注册一个helper的写法：</p>\n\n<pre><code>Handlebars.registerHelper(&#39;foo&#39;, function() {});</code></pre>\n\n<p>注册多个helper的写法：</p>\n\n<pre><code>Handlebars.registerHelper({\n\tfoo: function() {},\n\tbar: function() {}\n});</code></pre>\n\n<h3>registerHelper()的回调函数</h3>\n\n<p><code>registerHelper()</code>的回调函数支持两个参数：</p>\n\n<pre><code>Handlebars.registerHelper(&#39;foo&#39;, function(object,option) {});</code></pre>\n\n<p><code>object</code>就是模版对应的对象，没什么好说的。重点在<code>option</code>，它会根据helper的类型而不同。</p>\n\n<p>如果是<strong>普通的helper</strong>，<code>option</code>的结构是这样的：</p>\n\n<pre><code>option:{\n\tdata:Object,\t//  存放数据，其实就是回调函数的第一个参数object\n\thash:Object,\t//\thash列表，如果模板中调用helper的时候，传了key-value的参数，就会存到这里来\n\tname:&#39;foo&#39;\t\t//\thelper的名称\n}</code></pre>\n\n<p>对应的模版：<code>{{foo object}}</code></p>\n\n<p>如果是<strong>block helper</strong>，<code>option</code>的结构是这样的：</p>\n\n<pre><code>option:{\n\tdata:Object,\t\t//  存放数据，其实就是回调函数的第一个参数object\n\thash:Object,\t\t//\thash列表，如果模板中调用helper的时候，传了key-value的参数，就会存到这里来\n\tname:&#39;foo&#39;\t\t\t//\thelper的名称\n\tfn:funtion,\t\t\t//\tfn函数就像Handlebars.compile()函数一样，提供一个数据，返回一串字符串。\n\tinverse:function\t//\t目前还不知道什么用途\n}</code></pre>\n\n<p>对应的模版：<code>{{#foo object}}{{/foo}}</code></p>\n\n<p>例子：<a href=\"https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-helper-registerHelper.html\">handlebars-helper-registerHelper.html</a></p>\n\n<h2>Built-in Helper</h2>\n\n<h3>if helper</h3>\n\n<p><code>{{#if}}</code>就和使用JavaScript一样，你可以指定条件渲染DOM，如果它的参数返回<code>false</code>，<code>undefined</code>, <code>null</code>, <code>&quot;&quot;</code> 或者 <code>[]</code> (一个错误的值), Handlebar将不会渲染DOM，如果存在<code>{{else}}</code>则执行<code>{{else}}</code>后面的渲染 例如：</p>\n\n<pre><code>{{#if list}}\n\t&lt;ul id=&quot;list&quot;&gt;\n\t\t{{#each list}}\n    \t\t&lt;li&gt;{{this}}&lt;/li&gt;\n\t\t{{/each}}\n\t&lt;/ul&gt;\n{{else}}\n\t&lt;p&gt;{{error}}&lt;/p&gt;\n{{/if}}</code></pre>\n\n<p>对应适用json数据</p>\n\n<pre><code>var data = {\n\tlist:[&#39;HTML5&#39;,&#39;CSS3&#39;,&quot;WebGL&quot;],\n\terror:&quot;数据取出错误&quot;\n}</code></pre>\n\n<p>这里<code>{{#if}}</code>判断是否存在list数组，如果存在则遍历list，如果不存在输出错误信息。</p>\n\n<h3>unless helper</h3>\n\n<p><code>{{#unless}}</code>这个语法是反向的if语法也就是当判断的值为false时他会渲染DOM 例如：</p>\n\n<pre><code>&lt;div class=&quot;entry&quot;&gt;\n\t{{#unless license}}\n\t\t&lt;h3 class=&quot;warning&quot;&gt;WARNING: This entry does not have a license!&lt;/h3&gt;\n\t{{/unless}}\n&lt;/div&gt;</code></pre>\n\n<p>如果<code>license</code>返回一个错误的值，那么Handlebars就会渲染这个模板，结果会是：</p>\n\n<pre><code>&lt;div class=&quot;entry&quot;&gt;\n\t&lt;h3 class=&quot;warning&quot;&gt;WARNING: This entry does not have a license!&lt;/h3&gt;\n&lt;/div&gt;</code></pre>\n\n<h3>each helper</h3>\n\n<p>你可以使用内置的each helper遍历列表块内容，用this来引用遍历的元素 例如：</p>\n\n<pre><code>&lt;ul&gt;\n\t{{#each name}}\n    \t&lt;li&gt;{{this}}&lt;/li&gt;\n\t{{/each}}\n&lt;/ul&gt;</code></pre>\n\n<p>对应适用的json数据</p>\n\n<pre><code>{\n\tname: [&quot;html&quot;,&quot;css&quot;,&quot;javascript&quot;]\n};</code></pre>\n\n<p>这里的<code>this</code>指的是数组里的每一项元素，和上面的Block很像，但原理是不一样的这里的name是数组，而内置的each就是为了遍历数组用的，更复杂的数据也同样适用。</p>\n\n<h3>with helper</h3>\n\n<p><code>{{#with}}</code>一般情况下，Handlebars模板会在编译的阶段的时候进行context传递和赋值。使用with的方法，我们可以将context转移到数据的一个section里面（如果你的数据包含section）。 这个方法在操作复杂的template时候非常有用。</p>\n\n<pre><code>&lt;div class=&quot;entry&quot;&gt;\n\t&lt;h1&gt;{{title}}&lt;/h1&gt;\n\t{{#with author}}\n\t\t&lt;h2&gt;By {{firstName}} {{lastName}}&lt;/h2&gt;\n\t{{/with}}\n&lt;/div&gt;</code></pre>\n\n<p>对应适用json数据</p>\n\n<pre><code>{\n\ttitle: &quot;My first post!&quot;,\n\tauthor: {\n\t\tfirstName: &quot;Charles&quot;,\n\t\tlastName: &quot;Jolley&quot;\n\t}\n}</code></pre>\n\n<p>另外，<code>{{with}}</code>也可以嵌套<code>{{else}}</code>使用：</p>\n\n<pre><code>{{#with author}}\n\t&lt;p&gt;{{name}}&lt;/p&gt;\n{{else}}\n\t&lt;p class=&quot;empty&quot;&gt;No content&lt;/p&gt;\n{{/with}}</code></pre>\n\n<h3>lookup helper</h3>\n\n<p>lookup中文翻译是查找的意思，效果是在给定的父项中查找一个子项，看lookup helper的源码：</p>\n\n<pre><code>instance.registerHelper(&#39;lookup&#39;, function(obj, field) {\n  return obj &amp;&amp; obj[field];\n});</code></pre>\n\n<p>根据javascript的&amp;&amp;(逻辑与)运算规则，如果obj不存在，则返回false，如果obj存在，就判断obj[field]是否存在，如果存在就返回obj[field]的值，否则返回false。</p>\n\n<p>上个例子看一下会更清楚，给定这么一个json数据：</p>\n\n<pre><code>{\n\ttitle: &quot;My first post!&quot;,\n\tauthor: {\n\t\tfirstName: &quot;Charles&quot;,\n\t\tlastName: &quot;Jolley&quot;\n\t},\n\tskill:[&#39;HTML5&#39;,&#39;CSS3&#39;,&#39;Javascript&#39;]\n}</code></pre>\n\n<p>那么：</p>\n\n<pre><code>{{lookup author &#39;firstName&#39;}}\t//\tCharles\n{{lookup author 0}}\t\t\t\t//\tnull\n{{lookup skill &#39;HMLT5&#39;}}\t\t//\tnull\n{{lookup skill 0}}\t\t\t\t//\tHTML5\n{{lookup this title}}\t\t\t//\tMy first post!</code></pre>\n\n<p>lookup配合each有一种巧妙的用法，可以遍历数组，输出数组的值：</p>\n\n<pre><code>{{#each skill}}\n\t{{lookup ../skill @index}}、\t//\t@index是skill的索引\n{{/each}}</code></pre>\n\n<p>结果是：<code>HTML5、CSS3、Javascript、</code></p>\n\n<h3>log helper</h3>\n\n<p>这个log helper很奇怪，我按照官方的做法：</p>\n\n<pre><code>{{log &#39;Look up me!&#39;}}</code></pre>\n\n<p>但是没什么用。</p>\n\n<p>去查看log helper的源码：</p>\n\n<pre><code>instance.registerHelper(&#39;log&#39;, function(message, options) {\n  var level = options.data &amp;&amp; options.data.level != null ? parseInt(options.data.level, 10) : 1;\n  instance.log(level, message);\n});</code></pre>\n\n<p>这个instance.log()方法何许人也？寻找它的真相(387行)：</p>\n\n<pre><code>var logger = {\n\tmethodMap: { 0: &#39;debug&#39;, 1: &#39;info&#39;, 2: &#39;warn&#39;, 3: &#39;error&#39; },\n\n\t// State enum\n\tDEBUG: 0,\n\tINFO: 1,\n\tWARN: 2,\n\tERROR: 3,\n\tlevel: 3,\n\n\t// can be overridden in the host environment\n\tlog: function(level, message) {\n\t  if (logger.level &lt;= level) {\n\t    var method = logger.methodMap[level];\n\t    if (typeof console !== &#39;undefined&#39; &amp;&amp; console[method]) {\n\t      console[method].call(console, message);\n\t    }\n\t  }\n\t}\n};\n__exports__.logger = logger;\nvar log = logger.log;\n__exports__.log = log;</code></pre>\n\n<p>官方文档没有写明怎么用，在跟Handlebars的开发者沟通之后（<a href=\"https://github.com/wycats/handlebars.js/issues/888\">issue</a>），终于知道了怎么用。</p>\n\n<p>如果要用到log helper的话，需要添加这样的代码：<code>Handlebars.logger.level = Handlebars.logger.INFO</code>，这样log helper就会输出<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>的信息了，默认是输出<code>ERROR</code>信息的。</p>\n\n<h3>完整脚本</h3>\n\n<p>请参考：<a href=\"https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-builtin-helper.html\">handlebars-builtin-helper.html</a></p>\n\n<h2>Precompilation</h2>\n\n<p>Handlebars允许把模版编译这一工作预先执行，减少客户端的压力。使用预编译是需要npm和node环境的，以下教程是在安装了npm和node环境的前提。</p>\n\n<h3>全局安装Handlebars</h3>\n\n<pre><code>$ npm install handlebars -g</code></pre>\n\n<h3>预编译Template</h3>\n\n<pre><code>$ handlebars &lt;input&gt; -f &lt;output&gt;</code></pre>\n\n<h3>Example</h3>\n\n<p>我们新建一个Handlebars后缀的文件(helloworld.handlebars):</p>\n\n<p>helloworld.handlebars:</p>\n\n<pre><code>&lt;div&gt;\n\t&lt;h1&gt;{{title}}&lt;/h1&gt;\n\t&lt;p&gt;Handlebars precompile example&lt;/p&gt;\n\t&lt;p&gt;Hello World!!!&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n\n<p>预编译helloworld.handlebars：</p>\n\n<pre><code>$ handlebars helloworld.handlebars -f helloworld.js</code></pre>\n\n<p>在html中引入helloworld.js文件(在Handlebars.js之后)：</p>\n\n<pre><code>&lt;script src=&quot;helloworld.js&quot;&gt;&lt;/script&gt;</code></pre>\n\n<p>然后我们就可以用<code>Handlebars.templates[&#39;helloworld&#39;]</code>或者<code>Handlebars.templates.helloworld</code>访问我们编译好的模板了。</p>\n\n<h3>完整脚本</h3>\n\n<p>请参考：<a href=\"https://github.com/JerryC8080/handlebarjs-guide/blob/master/examples/handlebars-precompiled.html\">handlebars-precompiled.html</a></p>","__v":0,"createTime":{"minute":"2014-12-7 23:16","day":"2014-12-7","month":"2014-12","year":"2014","date":"2014-12-07T15:16:15.697Z"},"lastUpdateTime":{"minute":"2014-12-8 9:23","day":"2014-12-8","month":"2014-12","year":"2014","date":"2014-12-08T01:23:41.464Z"}},{"__v":0,"_id":"542d597b3f1b21a809f9e6a0","author":"JerryC","brief":"        博客自上线到今天已经过去了一个星期了，依然是保持上线的样子。一些还没有来得及完善的东西依然没有完善。是因为这个星期都忙着去面试了，当然，这个博客也是想着在面试之前上线，然后作为一个作品来展示实力吧。终于，到了今天，才能够空出时间来做一些修正。","content":"<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<strong><span style=\"font-size:18px;\">前言：</span></strong> \n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<br />\n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t博客自上线到今天已经过去了一个星期了，依然是保持上线的样子。一些还没有来得及完善的东西依然没有完善。是因为这个星期都忙着去面试了，当然，这个博客也是想着在面试之前上线，然后作为一个作品来展示实力吧。终于，到了今天，才能够空出时间来做一些修正。\n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<br />\n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<span style=\"font-size:18px;\"><strong>日志：</strong></span>\n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<ol>\n\t\t<li>\n\t\t\t后台管理实现图片上传功能\n\t\t</li>\n\t\t<li>\n\t\t\t后台管理实现图片管理功能\n\t\t</li>\n\t\t<li>\n\t\t\t更换网站icon\n\t\t</li>\n\t\t<li>\n\t\t\t实现一键静态化全站功能\n\t\t</li>\n\t\t<li>\n\t\t\t接入百度站长统计工具\n\t\t</li>\n\t</ol>\n\t<div>\n\t\t<br />\n\t</div>\n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<span style=\"font-size:18px;\"><strong>后面要做的优化：</strong></span>\n</div>\n<div style=\"font-family:微软雅黑;font-size:13.63636302947998px;\">\n\t<ul>\n\t\t<li>\n\t\t\tseo初级优化\n\t\t</li>\n\t\t<li>\n\t\t\t资源压缩\n\t\t</li>\n\t\t<li>\n\t\t\t文章添加查看大图功能\n\t\t</li>\n\t\t<li>\n\t\t\taboutme页面的制作\n\t\t</li>\n\t\t<li>\n\t\t\t实现图片的lazyLoad()\n\t\t</li>\n\t\t<li>\n\t\t\t代码压缩\n\t\t</li>\n\t</ul>\n</div>","title":"BlueSun 开发日志（10.01）","createTime":{"minute":"2014-10-2 21:56","day":"2014-10-2","month":"2014-10","year":"2014","date":"2014-10-02T13:56:11.219Z"},"lastUpdateTime":{"date":"2014-10-02T14:01:50.611Z","day":"2014-10-2","minute":"2014-10-2 22:01","month":"2014-10","year":"2014"}},{"__v":0,"_id":"541ee57677d8b1601b193d98","author":"JerryC","brief":"受益于Node的问世，Javascript终于能够挣脱浏览器这个条条框框的盒子。于是，Javascript能够开发服务器应用了。既然Javascript能够运行在操作系统中，那是否也能使用Javascript像C/C++开发那些个桌面应用呢。 在Google一番之后，果然已经有高人实现了这个想法了。","content":"<img id=\"aimg_JzMVh\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168354773.jpg\" border=\"0\" alt=\"\" width=\"787\" height=\"194\" title=\"\" align=\"\" /><br />\n<br />\n<strong><span>前言：</span></strong><span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\"> </span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">受益于Node的问世，Javascript终于能够挣脱浏览器这个条条框框的盒子。于是，Javascript能够开发服务器应用了。既然Javascript能够运行在操作系统中，那是否也能使用Javascript像C/C++开发那些个桌面应用呢。</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">在Google一番之后，果然已经有高人实现了这个想法了。</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">Node-WebKit，把浏览器的布局引擎WebKit和Node.js结合了在一起。WebKit负责处理HTML5 UI相关的部分，而Node.js负责本地的API接口，比如文件系统，网络，设备等等。</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">一个需要特别提醒的，Node-WebKit的开发维护者正是国内的王文睿大大，中国人啊，很自豪有木有！！但是项目文档好想没有中文版的，只是英文版的，这也许是要和国际接轨的原因吧。</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">项目地址：</span><a href=\"https://github.com/rogerwang/node-webkit\" target=\"_blank\">https://github.com/rogerwang/node-webkit</a><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">话不多说，我们撸起袖子，开始尝试一下使用前端技术开发桌面应用的乐趣吧。</span><br />\n<br />\n<br />\n<hr class=\"l\" />\n<br />\n<span style=\"background-color:#FFFFFF;\"><strong>Windows桌面版《2048》</strong></span><br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><strong>Step 1&nbsp; &nbsp; 准备材料</strong></span><br />\n<br />\n<span style=\"background-color:#FFFFFF;\">1、node-webkit(本文使用v0.8.6-win版本):</span><br />\n<span style=\"background-color:#FFFFFF;\">http://dl.node-webkit.org/v0.8.6/node-webkit-v0.8.6-win-ia32.zip</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">2、基于jQuery实现的2048游戏：</span><br />\n<a href=\"http://www.w3cfuns.com/blog-5446836-5399036.html\" target=\"_blank\">http://www.w3cfuns.com/blog-5446836-5399036.html</a><span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">（原文地址）</span><br />\n<a href=\"https://github.com/JerryC8080/My2048\" target=\"_blank\">https://github.com/JerryC8080/My2048</a><span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">（下载地址）</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">node-webkit的其他版本，在项目地址（</span><a href=\"https://github.com/rogerwang/node-webkit\" target=\"_blank\">https://github.com/rogerwang/node-webkit</a><span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">）可以下载得到，不同操作系统是不同版本的。</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">基于jQuery实现的2048游戏，是我之前做的一个小玩意，而这一次就完美移植到Windows桌面，哇嘎嘎嘎。</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">node-webkit下载并解压之后，如下：</span><br />\n<img id=\"aimg_e6zMg\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168419938.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" /><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">文件说明：</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">nw.pak&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--核心Javascript库</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">incudt.dll&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; --网络库</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">ffmpegsumo.dll&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; --媒体库，为、或者其他媒体功能提供支持</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">libEGL.dll、libGLESv2.dll、D3DCompiler_43.dll、d3dx9_43.dll&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; --该四个dll，为WebGL、GPU、DirectX提供支持</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">基于jQuery实现的2048游戏下载并解压之后，如下：</span><br />\n<img id=\"aimg_s0img\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168441331.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<br />\n<strong><span>Step 2&nbsp; &nbsp; 编写package.json文件</span></strong><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">在《2048》游戏的目录，新建一个package.json文件，输入内容：</span><br />\n<div class=\"blockcode\" style=\"margin:10px 0px;padding:10px 0px 5px 10px;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;color:#666666;border:1px solid #CCCCCC;font-size:14px;background:url(http://cdn.w3cfuns.com/resource/images/codebg.gif) 0px 0px repeat-y #F7F7F7;\">\n\t<div id=\"code_g14\" style=\"margin:0px;padding:0px;\">\n\t\t<ol>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t{<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"name\": \"MyDemo\",<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"main\": \"index.html\",<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"window\": {<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"toolbar\": false,<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"resizable\": false,<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"width\": 660,<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t\"height\": 800<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t}<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t}\n\t\t\t</li>\n\t\t</ol>\n\t</div>\n<span style=\"font-size:12px;color:#336699 !important;\">复制代码</span> \n</div>\n<img id=\"aimg_W3A6Y\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168471850.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><strong>Step 3&nbsp; &nbsp; 压缩源程序</strong></span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">我们使用压缩工具，把已经编写好的../My2048-master目录里面的内容压缩。</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">压缩需要注意的两点：</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">1、压缩格式要为zip；</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">2、文件后缀名要为.nw；</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">如图：</span><br />\n<img id=\"aimg_gtw1o\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168511771.jpg\" border=\"0\" alt=\"\" width=\"460\" height=\"415\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">压缩完成</span><br />\n<img id=\"aimg_PY63u\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168553899.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<br />\n<strong><span>Step 4&nbsp; &nbsp; 预览</span></strong><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">把压缩好的 My2048-master.nw 文件复制到node-webkit目录：</span><br />\n<img id=\"aimg_aE9eS\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168592404.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">运行cmd，</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">移动到node-webkit所在的目录： cd + node-webkit所在的路径</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">运行命令：nw My2048-master.nw</span><br />\n<img id=\"aimg_yV7iT\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168834596.jpg\" border=\"0\" alt=\"\" width=\"677\" height=\"443\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">便能看到预览效果了</span><br />\n<img id=\"aimg_Mh7Br\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168728769.jpg\" border=\"0\" alt=\"\" width=\"676\" height=\"768\" title=\"\" align=\"\" /><br />\n<br />\n<br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><strong>Step 5&nbsp; &nbsp; 生成exe执行文件</strong></span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">依然在node-webkit的目录下</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">运行命令：</span><span><span><span>copy /b nw.exe+My2048-master.nw My2048.exe</span></span></span><br />\n<span><span><span><img id=\"aimg_Hg7JL\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168608341.jpg\" border=\"0\" alt=\"\" width=\"677\" height=\"443\" title=\"\" align=\"\" /></span></span></span><br />\n<span><span><span><br />\n</span></span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><span>OK，我们可以看到node-webkit目录下多了一个My2048.exe的执行文件，我们点解它运行看看效果：</span></span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><span><img id=\"aimg_DOTZC\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168871884.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" /><br />\n<br />\n<img id=\"aimg_OxKxO\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168728769.jpg\" border=\"0\" alt=\"\" width=\"676\" height=\"768\" title=\"\" align=\"\" /><br />\n</span></span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><span><br />\n</span></span></span><br />\n<strong><span>Step 6&nbsp; &nbsp; 打包程序</span></strong><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">如果想把这个程序发给朋友，除了.exe文件之外，还需要包括另外两个必要的文件:</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">icudt.dll(必要网络库)、</span><br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">nw.pak(核心javascript库)</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">这两个是最基本的文件，如果程序还包含了其他功能，还需要包含相对应的dll文件，各个文件功能说明文章开始已经说明了。</span><br />\n<br />\n<span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">所以，我们得到了最基本的发布版了：</span><br />\n<img id=\"aimg_t2wyJ\" class=\"zoom\" src=\"/images/uploadImg/imgFile1412168908105.jpg\" border=\"0\" alt=\"\" width=\"880\" height=\"612\" title=\"\" align=\"\" />","title":"HTML、CSS、JS打造Windows桌面版《2048》","createTime":{"minute":"2014-9-21 22:49","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:49:26.912Z"},"lastUpdateTime":{"date":"2014-10-01T14:06:32.746Z","day":"2014-10-1","minute":"2014-10-1 22:06","month":"2014-10","year":"2014"}},{"__v":0,"_id":"541ee55377d8b1601b193d97","author":"JerryC","brief":"受网上看到的一个2048视频游戏制作的启发，做了一个网页版的，很多细节参照了一下别人的。暂时还没有分数统计功能，找时间再做好。先上一个demo版。","content":"<span style=\"background-color:#FFFFFF;\"><span><strong>前言：</strong></span></span><span style=\"color:#222222;font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;line-height:25.200000762939453px;background-color:#FFFFFF;\">受网上看到的一个2048视频游戏制作的启发，做了一个网页版的，很多细节参照了一下别人的。暂时还没有分数统计功能，找时间再做好。先上一个demo版。</span><br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><span><strong>截图：</strong></span></span><br />\n<img id=\"aimg_BrZSE\" class=\"zoom\" src=\"/JerryC_admin/..\\images\\uploadImg\\imgFile1412172676130.jpg\" border=\"0\" alt=\"\" width=\"610\" height=\"817\" /><br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><span><strong>程序架构：<br />\n<img id=\"aimg_ib0qi\" class=\"zoom\" src=\"/JerryC_admin/..\\images\\uploadImg\\imgFile1412172691061.jpeg\" border=\"0\" alt=\"\" width=\"1220\" height=\"1733\" /></strong></span></span><br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><span><strong>演示地址：</strong><strong><a href=\"http://jerryc8080.github.io/My2048/\" target=\"_blank\">http://jerryc8080.github.io/My2048/</a></strong></span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><strong>程序地址：</strong><strong><a href=\"https://github.com/JerryC8080/My2048\" target=\"_blank\">https://github.com/JerryC8080/My2048</a></strong></span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><br />\n</span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><strong>代码：太多了就不贴了，有兴趣的看管请到以上地址下载吧。</strong></span></span><br />","title":"基于jQuery的2048游戏","createTime":{"minute":"2014-9-21 22:48","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:48:51.004Z"},"lastUpdateTime":{"date":"2014-10-01T14:11:35.957Z","day":"2014-10-1","minute":"2014-10-1 22:11","month":"2014-10","year":"2014"}},{"__v":0,"_id":"541ee53477d8b1601b193d96","author":"JerryC","brief":"闲着无事干，突然想做一个类Q+ Web桌面的东西，当然那是一个大工程（对本菜鸟来说）。那么，这个Demo就是第一步，起码可以实现图标的拖拽效果。","content":"<p style=\"font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;color:#222222;background-color:#FFFFFF;\">\n\t<span><span><strong><span>前言：</span></strong>闲着无事干，突然想做一个类Q+ Web桌面的东西，当然那是一个大工程（对本菜鸟来说）。</span></span>那么，这个Demo就是第一步，起码可以实现图标的拖拽效果。\n</p>\n<br />\n<br />\n<p style=\"font-family:verdana, 'Microsoft YaHei', Tahoma, sans-serif;font-size:14px;color:#222222;background-color:#FFFFFF;\">\n\t<span><span><span><strong>截图：</strong></span></span></span> \n</p>\n<img id=\"aimg_tV0lT\" class=\"zoom\" src=\"/JerryC_admin/..\\images\\uploadImg\\imgFile1412172732788.jpg\" border=\"0\" alt=\"\" width=\"1220\" height=\"629\" /><br />\n<br />\n<span style=\"background-color:#FFFFFF;\"><strong>代码：</strong></span><br />\n<strong> \n<div class=\"blockcode\" style=\"margin:10px 0px;padding:10px 0px 5px 10px;color:#666666;border:1px solid #CCCCCC;background:url(http://cdn.w3cfuns.com/resource/images/codebg.gif) 0px 0px repeat-y #F7F7F7;\">\n\t<div id=\"code_VKV\" style=\"margin:0px;padding:0px;\">\n\t\t<ol>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\tDrag Demo<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<div class=\"icon icon-0\">\n\t\t\t\t</div>\n<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<div class=\"icon icon-1\">\n\t\t\t\t</div>\n<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<div class=\"icon icon-2\">\n\t\t\t\t</div>\n<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<div class=\"icon icon-3\">\n\t\t\t\t</div>\n<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<div class=\"icon icon-4\">\n\t\t\t\t</div>\n<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t\t<br />\n\t\t\t</li>\n\t\t\t<li style=\"font-family:Monaco, Consolas, 'Lucida Console', 'Courier New', serif;font-size:12px;\">\n\t\t\t</li>\n\t\t</ol>\n\t</div>\n<span style=\"font-size:12px;color:#336699 !important;\">复制代码</span> \n</div>\n<br />\n<br />\n<span><span><span>演示地址：</span></span></span></strong><span style=\"background-color:#FFFFFF;\"><span><span><strong><a href=\"http://jerryc8080.github.io/dragDemo/\" target=\"_blank\">http://jerryc8080.github.io/dragDemo/</a></strong></span></span></span><br />\n<span style=\"background-color:#FFFFFF;\"><span><span><strong>项目地址：</strong><strong><a href=\"https://github.com/JerryC8080/dragDemo/\" target=\"_blank\">https://github.com/JerryC8080/dragDemo/</a></strong></span></span></span>","title":"原生Javascript实现拖拽效果","createTime":{"minute":"2014-9-21 22:48","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:48:20.985Z"},"lastUpdateTime":{"date":"2014-10-01T14:12:17.692Z","day":"2014-10-1","minute":"2014-10-1 22:12","month":"2014-10","year":"2014"}},{"title":"Javascript那些书籍","author":"JerryC","brief":"转眼间已是准大四生了，在身边的小伙伴们纷纷参加各小中大企业的暑期实习的时候，我却因为某原因回家乡宅一两个月咯。 人间有那么一句言论：程序员不持续学习是没出息滴。 人生也何尝不是这样，立志在前端发过发热的我，列了一些关于Javascript的书单，回家好好填补一下那些个知识的漏洞。","content":"<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t转眼间已是准大四生了，在身边的小伙伴们纷纷参加各小中大企业的暑期实习的时候，我却因为某原因回家乡宅一两个月咯。\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<span></span>人间有那么一句言论：程序员不持续学习是没出息滴。\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<span></span>人生也何尝不是这样，立志在前端发过发热的我，列了一些关于Javascript的书单，回家好好填补一下那些个知识的漏洞。\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<span></span>\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://img.blog.csdn.net/20140708204644093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmx1ZXN1bjg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" />\r\n</p>","_id":"541ee50d77d8b1601b193d95","__v":0,"createTime":{"minute":"2014-9-21 22:47","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:47:41.148Z"},"lastUpdateTime":{"minute":"2014-9-21 22:47","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:47:41.148Z"}},{"title":"JQuery动画反方向延伸","author":"JerryC","brief":"Jquery的动画效果都是从左到右，从上到下延伸的。如果要实现反方向延伸呢？","content":"<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\tJquery的动画效果都是从左到右，从上到下延伸的。如果要实现反方向延伸呢？\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t以下代码实现动画从右到左延伸，读者可以举一反三实现从下往上延伸的动画。\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\tCSS：\r\n</p>\r\n<div class=\"dp-highlighter bg_css\" style=\"font-family:Consolas, 'Courier New', Courier, mono, serif;margin:18px 0px !important;background:url(http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/images/css.gif) 100% 0% no-repeat #FFFFFF;\">\r\n\t<div class=\"bar\">\r\n\t\t<div class=\"tools\" style=\"padding:3px 8px 10px 10px;font-size:9px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:silver;\">\r\n\t\t\t<b>[css]</b>&nbsp;<a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"ViewSource\">view plain</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"CopyToClipboard\">copy</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"PrintSource\">print</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"About\">?</a>\r\n\t\t\t<div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<ol class=\"dp-css\" style=\"color:#5C5C5C;\">\r\n\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\"><span class=\"value\" style=\"background-color:inherit;\">#bar</span><span style=\"background-color:inherit;\">&nbsp;{&nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t\t<li class=\"\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">margin-left</span><span style=\"background-color:inherit;\">:&nbsp;</span><span class=\"value\" style=\"background-color:inherit;\">100px</span><span style=\"background-color:inherit;\">;&nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">height</span><span style=\"background-color:inherit;\">:&nbsp;</span><span class=\"value\" style=\"background-color:inherit;\">10px</span><span style=\"background-color:inherit;\">;&nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t\t<li class=\"\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">width</span><span style=\"background-color:inherit;\">:&nbsp;</span><span class=\"value\" style=\"background-color:inherit;\">0</span><span style=\"background-color:inherit;\">;&nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">background</span><span style=\"background-color:inherit;\">:&nbsp;</span><span class=\"value\" style=\"background-color:inherit;\">red</span><span style=\"background-color:inherit;\">;&nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t\t<li class=\"\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">}&nbsp;&nbsp;</span>\r\n\t\t</li>\r\n\t</ol>\r\n</div>\r\n<span style=\"font-family:Arial;font-size:14px;line-height:26px;background-color:#FFFFFF;\">jQuery</span>\r\n<div class=\"dp-highlighter bg_javascript\" style=\"font-family:Consolas, 'Courier New', Courier, mono, serif;margin:18px 0px !important;background:url(http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/images/javascript.gif) 100% 0% no-repeat #FFFFFF;\">\r\n\t<div class=\"bar\">\r\n\t\t<div class=\"tools\" style=\"padding:3px 8px 10px 10px;font-size:9px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:silver;\">\r\n\t\t\t<b>[javascript]</b>&nbsp;<a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"ViewSource\">view plain</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"CopyToClipboard\">copy</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"PrintSource\">print</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9402057#\" class=\"About\">?</a>\r\n\t\t\t<div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<ol class=\"dp-c\" style=\"color:#5C5C5C;\">\r\n\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\"><span style=\"background-color:inherit;\">$(</span><span class=\"string\" style=\"color:blue;background-color:inherit;\">'#bar'</span><span style=\"background-color:inherit;\">).animate({&nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t\t<li class=\"\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;marginLeft:&nbsp;0,&nbsp;&nbsp;</span>\r\n\t\t</li>\r\n\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100&nbsp;&nbsp;</span>\r\n\t\t</li>\r\n\t\t<li class=\"\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\">});&nbsp;&nbsp;</span>\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t</li>\r\n\t</ol>\r\n</div>","_id":"541ee4eb77d8b1601b193d94","__v":0,"createTime":{"minute":"2014-9-21 22:47","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:47:07.912Z"},"lastUpdateTime":{"minute":"2014-9-21 22:47","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:47:07.912Z"}},{"title":"iframe 在IE下透明背景","author":"JerryC","brief":"iframe 在其他主流浏览器下，默认背景是透明的。但是在IE下要通过设置iframe属性来实现背景透明化。","content":"<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\tiframe 在其他主流浏览器下，默认背景是透明的。但是在IE下要通过设置iframe属性来实现背景透明化。\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t代码如下：\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\tframeborder &nbsp; //边框属性\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\tallowtransparency &nbsp;//透明背景属性\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\tscrolling &nbsp;//滚动条属性\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<div class=\"dp-highlighter bg_html\" style=\"font-family:Consolas, 'Courier New', Courier, mono, serif;margin:18px 0px !important;background:url(http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/images/html.gif) 100% 0% no-repeat #FFFFFF;\">\r\n\t<div class=\"bar\">\r\n\t\t<div class=\"tools\" style=\"padding:3px 8px 10px 10px;font-size:9px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:silver;\">\r\n\t\t\t<b>[html]</b>&nbsp;<a href=\"http://blog.csdn.net/bluesun88/article/details/9815785#\" class=\"ViewSource\">view plain</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9815785#\" class=\"CopyToClipboard\">copy</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9815785#\" class=\"PrintSource\">print</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9815785#\" class=\"About\">?</a>\r\n\t\t\t<div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<ol class=\"dp-xml\" style=\"color:#5C5C5C;\">\r\n\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t<span style=\"color:black;background-color:inherit;\"><span class=\"tag\" style=\"color:#993300;font-weight:bold;background-color:inherit;\">&lt;</span><span class=\"tag-name\" style=\"color:#993300;font-weight:bold;background-color:inherit;\">iframe</span><span style=\"background-color:inherit;\">&nbsp;</span><span class=\"attribute\" style=\"color:red;background-color:inherit;\">frameborder</span><span style=\"background-color:inherit;\">=</span><span class=\"attribute-value\" style=\"color:blue;background-color:inherit;\">\"no\"</span><span style=\"background-color:inherit;\">&nbsp;</span><span class=\"attribute\" style=\"color:red;background-color:inherit;\">allowtransparency</span><span style=\"background-color:inherit;\">=</span><span class=\"attribute-value\" style=\"color:blue;background-color:inherit;\">\"true\"</span><span style=\"background-color:inherit;\">&nbsp;</span><span class=\"attribute\" style=\"color:red;background-color:inherit;\">scrolling</span><span style=\"background-color:inherit;\">=</span><span class=\"attribute-value\" style=\"color:blue;background-color:inherit;\">\"no\"</span><span style=\"background-color:inherit;\">&nbsp;</span><span class=\"attribute\" style=\"color:red;background-color:inherit;\">src</span><span style=\"background-color:inherit;\">=</span><span class=\"attribute-value\" style=\"color:blue;background-color:inherit;\">\"text-test1.html\"</span><span class=\"tag\" style=\"color:#993300;font-weight:bold;background-color:inherit;\">&gt;</span><span class=\"tag\" style=\"color:#993300;font-weight:bold;background-color:inherit;\">&lt;/</span><span class=\"tag-name\" style=\"color:#993300;font-weight:bold;background-color:inherit;\">iframe</span><span class=\"tag\" style=\"color:#993300;font-weight:bold;background-color:inherit;\">&gt;</span><span style=\"background-color:inherit;\">&nbsp; &nbsp;&nbsp;</span></span>\r\n\t\t</li>\r\n\t</ol>\r\n</div>","_id":"541ee4cc77d8b1601b193d93","__v":0,"createTime":{"minute":"2014-9-21 22:46","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:46:36.219Z"},"lastUpdateTime":{"minute":"2014-9-21 22:46","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:46:36.219Z"}},{"title":"【Kissy WaterFall】实行手动加载数据","author":"JerryC","brief":"由于Kissy WaterFall默认是监听滚动事件来实现数据动态加载的，但是有一些情况要用到手动加载数据。以下是使用Kissy WaterFall实现手动加载数据的方法。","content":"<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t前言：由于Kissy WaterFall默认是监听滚动事件来实现数据动态加载的，但是有一些情况要用到手动加载数据。以下是使用Kissy WaterFall实现手动加载数据的方法。\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t最终实现效果：点击”逛更多的商店“会动态加载数据\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://img.blog.csdn.net/20130721124107546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmx1ZXN1bjg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://img.blog.csdn.net/20130721124126671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmx1ZXN1bjg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t步骤：\r\n</p>\r\n<ol style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<li>\r\n\t\t当一页数据加载完成后停止监听滚动事件\r\n\t\t<div class=\"dp-highlighter bg_javascript\" style=\"font-family:Consolas, 'Courier New', Courier, mono, serif;font-size:12px;margin:18px 0px !important;\">\r\n\t\t\t<div class=\"bar\">\r\n\t\t\t\t<div class=\"tools\" style=\"padding:3px 8px 10px 10px;font-size:9px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:silver;\">\r\n\t\t\t\t\t<b>[javascript]</b>&nbsp;<a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"ViewSource\">view plain</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"CopyToClipboard\">copy</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"PrintSource\">print</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"About\">?</a>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<ol class=\"dp-c\" style=\"color:#5C5C5C;\">\r\n\t\t\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\"><span style=\"background-color:inherit;\">&lt;pre&nbsp;name=</span><span class=\"string\" style=\"color:blue;background-color:inherit;\">\"code\"</span><span style=\"background-color:inherit;\">&nbsp;</span><span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">class</span><span style=\"background-color:inherit;\">=</span><span class=\"string\" style=\"color:blue;background-color:inherit;\">\"javascript\"</span><span style=\"background-color:inherit;\">&gt;&lt;pre&nbsp;name=</span><span class=\"string\" style=\"color:blue;background-color:inherit;\">\"code\"</span><span style=\"background-color:inherit;\">&nbsp;</span><span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">class</span><span style=\"background-color:inherit;\">=</span><span class=\"string\" style=\"color:blue;background-color:inherit;\">\"javascript\"</span><span style=\"background-color:inherit;\">&gt;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment\" style=\"color:#008200;background-color:inherit;\">//加载一页数据完成后触发的事件</span><span style=\"background-color:inherit;\">&nbsp;&nbsp;</span></span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;waterfall.on(<span class=\"string\" style=\"color:blue;background-color:inherit;\">'addComplete'</span><span style=\"background-color:inherit;\">,&nbsp;</span><span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">function</span><span style=\"background-color:inherit;\">&nbsp;()&nbsp;{&nbsp;&nbsp;</span></span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S.log(<span class=\"string\" style=\"color:blue;background-color:inherit;\">'after&nbsp;add&nbsp;complete!'</span><span style=\"background-color:inherit;\">);&nbsp;&nbsp;</span></span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;waterfall.pause();&nbsp;&nbsp;</span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;&nbsp;</span>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t</div>\r\n<pre></pre>\r\n<pre></pre>\r\n<br />\r\n\t</li>\r\n\t<li>\r\n\t\t为按钮绑定重启监听滚动事件\r\n\t\t<div class=\"dp-highlighter bg_javascript\" style=\"font-family:Consolas, 'Courier New', Courier, mono, serif;font-size:12px;margin:18px 0px !important;\">\r\n\t\t\t<div class=\"bar\">\r\n\t\t\t\t<div class=\"tools\" style=\"padding:3px 8px 10px 10px;font-size:9px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:silver;\">\r\n\t\t\t\t\t<b>[javascript]</b>&nbsp;<a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"ViewSource\">view plain</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"CopyToClipboard\">copy</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"PrintSource\">print</a><a href=\"http://blog.csdn.net/bluesun88/article/details/9397281#\" class=\"About\">?</a>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<ol class=\"dp-c\" style=\"color:#5C5C5C;\">\r\n\t\t\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\"><span class=\"comment\" style=\"color:#008200;background-color:inherit;\">//加载更多按钮</span><span style=\"background-color:inherit;\">&nbsp;&nbsp;</span></span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">$(<span class=\"string\" style=\"color:blue;background-color:inherit;\">\"#button_container_more\"</span><span style=\"background-color:inherit;\">).on(</span><span class=\"string\" style=\"color:blue;background-color:inherit;\">'click'</span><span style=\"background-color:inherit;\">,</span><span class=\"keyword\" style=\"color:#006699;font-weight:bold;background-color:inherit;\">function</span><span style=\"background-color:inherit;\">(){&nbsp;&nbsp;&nbsp;&nbsp;</span></span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"alt\" style=\"color:inherit;\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">&nbsp;&nbsp;&nbsp;&nbsp;waterfall.resunme();&nbsp;&nbsp;</span>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li class=\"\">\r\n\t\t\t\t\t<span style=\"color:black;background-color:inherit;\">});&nbsp;&nbsp;</span>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t</div>\r\n<br />\r\n\t</li>\r\n\t<li>\r\n\t\t附录：waterfall.pause()与water.resunme()的说明（从官网上转载的）<br />\r\npause()函数和resunme()函数属于插件里的waterfall.loader对象的<br />\r\nresunme() ：继续开始监控scroll事件（随时可能会动态加载）<br />\r\npause() ：停止监控scroll事件（停止动态加载）<br />\r\n参考网址：<a target=\"_blank\" href=\"http://docs.kissyui.com/docs/html/api/component/waterfall/loader.html#waterfall.Waterfall.prototype.pause\">http://docs.kissyui.com/docs/html/api/component/waterfall/loader.html#waterfall.Waterfall.prototype.pause</a><br />\r\n\t</li>\r\n</ol>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<strong>出现问题：按照以上来完成的话，当点击”加载更多“按钮时，只是启动了滚动监听。意思就是，要加载数据，一要点击按钮，二要再次滚动鼠标。这样的用户体验很差。</strong>\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t<br />\r\n</p>\r\n<p style=\"font-family:Arial;font-size:14px;background-color:#FFFFFF;\">\r\n\t解决办法：修改按钮动作：new一个waterfall.loader，重新赋值waterfall对象，再重新绑定addComplete事件。\r\n</p>","_id":"541ee44177d8b1601b193d92","__v":0,"createTime":{"minute":"2014-9-21 22:44","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:44:17.484Z"},"lastUpdateTime":{"minute":"2014-9-21 22:44","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:44:17.484Z"}},{"title":"BlueSun 开发日志（9.21）","author":"JerryC","brief":"连续三天的失眠，躺下来脑海中总会浮现各种想法，以及实现的方法。于是夜半爬起，挑灯“啪啪啪”....","content":"<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<span style=\"font-size:18px;\"><strong>前言：</strong></span>\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t&nbsp; &nbsp; 连续三天的失眠，躺下来脑海中总会浮现各种想法，以及实现的方法。于是夜半爬起，挑灯“啪啪啪”....\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<br />\r\n</div>\r\n<span style=\"font-family:微软雅黑;font-size:18px;line-height:normal;\"><strong>日志（9.20-9.21）：</strong></span>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<ol>\r\n\t\t<li>\r\n\t\t\t实现客户端伪动态加载数据。思路：服务器提取mongodb数据，利用fs模块生成专门存放数据的js文件，由客户端执行。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t实现主页、博客页、笔记页、实验室页的静态化生成功能。至此，已实现全站静态化。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t前端界面的响应式布局调整，使手机浏览更加精细。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t在git建立创库，并把public目录分支到gh-pages，从而利用gitpages功能，能够让外网浏览。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t购买域名huang-jerryc，利用DNSPod实现域名的转向。于是能用huang-jerryc访问github的BlueSun项目。\r\n\t\t</li>\r\n\t</ol>\r\n</div>","_id":"541eda837b8c3a04146cb851","__v":0,"createTime":{"minute":"2014-9-21 22:02","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:02:43.164Z"},"lastUpdateTime":{"minute":"2014-9-21 22:02","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:02:43.164Z"}},{"title":"BlueSun 开发日志（9.16-9.19）","author":"JerryC","brief":"前端界面移动浏览的优化； blog articles 的静态化功能； notes articles 的静态化功能； 工具ejs-static开发到0.0.1版本，提供静态化功能； mongoose的链接所需要字段，提取抽象出DBsetting.js文件；","content":"<span style=\"font-size:18px;\"><strong>日志（9.16-9.19）：</strong></span>\r\n<div>\r\n\t<ol>\r\n\t\t<li>\r\n\t\t\t前端界面移动浏览的优化；\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tblog articles 的静态化功能；\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tnotes articles 的静态化功能；\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t工具ejs-static开发到0.0.1版本，提供静态化功能；\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tmongoose的链接所需要字段，提取抽象出DBsetting.js文件；\r\n\t\t</li>\r\n\t</ol>\r\n<br />\r\n\t<div>\r\n\t\t<span style=\"font-size:18px;\"><strong>收获：</strong></span>\r\n\t</div>\r\n</div>\r\n<div>\r\n\t<ul>\r\n\t\t<li>\r\n\t\t\t自己能初步写出一个nodejs的模块，虽然功能简单，但是从0到1，是那么的大的一步。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tmeta标签有一个viewport的属性，能针对移动浏览器进行优化。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tejs.render()能够把渲染的页面返回 ，然后用fs保存到本地实现动态页面静态化。\r\n\t\t</li>\r\n\t</ul>\r\n\t<div>\r\n\t\t<br />\r\n\t</div>\r\n</div>\r\n<div>\r\n\t<span style=\"font-size:18px;\"><strong>问题：</strong></span>\r\n</div>\r\n<div>\r\n\t<ul style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t\t<li>\r\n\t\t\t还不了解为什么display：flex属性手机浏览器不起作用了，元素的不能居中。原因不明\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t弧形导航条在移动浏览器上少了最后一个li元素，不能展示。原因不明\r\n\t\t</li>\r\n\t</ul>\r\n<br />\r\n\t<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t\t<span style=\"font-size:18px;\"><strong>下一步要做的：</strong></span>\r\n\t</div>\r\n\t<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t\t把mongodb文章的数据生成一个object数组，用fs把数据保存到js文件中，然后放到客户端，实现客户端的伪动态加载文章。\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t实现所有页面的静态化（主页、博客页、笔记页、实验室页）。\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t制作about me 页面。\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t把生成好的public文件里面的内容push到gitpage上。\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t注册一个域名，绑定到gitpage。\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</div>\r\n</div>","_id":"541eda597b8c3a04146cb850","__v":0,"createTime":{"minute":"2014-9-21 22:02","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:02:01.732Z"},"lastUpdateTime":{"minute":"2014-9-21 22:02","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:02:01.732Z"}},{"title":"BlueSun 开发日志（9.15）","author":"JerryC","brief":"1.引入了KindEditor在线HTML编辑器，暂时提供文本修改功能。 完成后台的权限控制 完成Blog Article的增加 初步完成Blog Article的修改 增加管理后台的注销功能","content":"<span style=\"font-family:微软雅黑;font-size:18px;line-height:normal;\"><strong>日志：</strong></span>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<ol>\r\n\t\t<li>\r\n\t\t\t引入了KindEditor在线HTML编辑器，暂时提供文本修改功能。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t完成后台的权限控制\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t完成Blog Article的增加\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t初步完成Blog Article的修改\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t增加管理后台的注销功能\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t管理后台的views和public资源已经分布到单独文件夹。\r\n\t\t</li>\r\n\t</ol>\r\n\t<div>\r\n\t\t<span style=\"font-size:18px;\"><strong>收获：</strong></span>\r\n\t</div>\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<ul>\r\n\t\t<li>\r\n\t\t\t了解了在线HTML编辑器KindEditor的原理，实质就是通过前端js修改textarea的内容，依然是通过post把文本发送到后端。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t了解了mongoose的update和save一样可以实现到更新功能。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\tviews文件夹内嵌admin文件夹的话，调用时可以这样调用：res.render('admin/xxx',callback);\r\n\t\t</li>\r\n\t</ul>\r\n</div>","_id":"541eda147b8c3a04146cb84f","__v":0,"createTime":{"minute":"2014-9-21 22:00","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:00:52.662Z"},"lastUpdateTime":{"minute":"2014-9-21 22:00","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T14:00:52.662Z"}},{"title":"BlueSun 开发日志（9.14）","author":"JerryC","brief":"今天看了一篇文章，说程序员的写作能力是一个很重要的技能。建议多写一写文章。所以，我觉得除了写日记之外，我应该多尝试一下其他的文体。所以，今天，我开始了BlueSun的开发日志的撰写。","content":"<p>\r\n\t<span style=\"font-family:微软雅黑;font-size:18px;line-height:normal;\"><strong>前言：</strong></span>\r\n</p>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t&nbsp; &nbsp; 今天看了一篇文章，说程序员的写作能力是一个很重要的技能。建议多写一写文章。所以，我觉得除了写日记之外，我应该多尝试一下其他的文体。所以，今天，我开始了BlueSun的开发日志的撰写。\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<br />\r\n</div>\r\n<p style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<strong><span style=\"font-size:18px;\">日志：</span></strong>\r\n</p>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<ol>\r\n\t\t<li>\r\n\t\t\t引入了上学期Java Web课程项目自主开发的简易后台，主要是代码是自己写得，用起来会顺心一点。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t第一步完成了登录模块。\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t引入依赖模块：\r\n\t\t</li>\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t\t&nbsp;connect-flash （存放于session的模块，主要用于跨域传输信息。）\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t&nbsp;cookie-session &nbsp; &nbsp;（session中间件，在express4.x，取消了express自带的session中间件，中间件被独立出来了，所以要另外安装依赖模块。）\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</ol>\r\n<br />\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<span style=\"font-size:18px;\"><strong>学习到的：</strong></span>\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<ul>\r\n\t\t<li>\r\n\t\t\t初步了解了mongoose的增删改查\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t熟悉了connect-flash的应用\r\n\t\t</li>\r\n\t\t<li>\r\n\t\t\t知道了express4.x 的中间件是需要另外引入的\r\n\t\t</li>\r\n\t</ul>\r\n\t<div>\r\n\t\t<br />\r\n\t</div>\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t<span style=\"font-size:18px;\"><strong>后话：</strong></span>\r\n</div>\r\n<div style=\"font-family:微软雅黑;font-size:14px;\">\r\n\t&nbsp; &nbsp; 写开发日志的另外重要的好处：记录自己的每一天的一点点的进步。\r\n</div>","_id":"541ed9c87b8c3a04146cb84e","__v":0,"createTime":{"minute":"2014-9-21 21:59","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T13:59:36.848Z"},"lastUpdateTime":{"minute":"2014-9-21 21:59","day":"2014-9-21","month":"2014-9","year":"2014","date":"2014-09-21T13:59:36.848Z"}}]